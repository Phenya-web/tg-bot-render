import os
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import timedelta

# Telegram bot token –∏ ID –∫–∞–Ω–∞–ª–æ–≤
TOKEN = os.getenv("API_TOKEN")
CHANNEL_1 = os.getenv("CHANNEL_ID")
CHANNEL_2 = os.getenv("CHANNEL_CHAT_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("bot-creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1G5TYg6CJnEZygfiv6BeKnHuu-XirPQmlT4B2UFn19oc").sheet1

user_states = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —à–∞–≥–æ–≤


# –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_admin(chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in ['administrator', 'creator']


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != 'private':
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–°.")
        return
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚Äî —É–∂–µ –µ—Å—Ç—å?
    try:
        records = sheet.get_all_records()
        for row in records:
            if str(row.get("User ID")) == user_id:
                await message.reply("üîÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—É—é.")
                return
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets:", e)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    unsubscribed = []
    for chat_id in [CHANNEL_1, CHANNEL_2]:
        try:
            member = await bot.get_chat_member(chat_id=chat_id, user_id=int(user_id))
            if member.status not in ['member', 'administrator', 'creator']:
                unsubscribed.append(chat_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {chat_id}:", e)
            unsubscribed.append(chat_id)

    if not unsubscribed:
        await message.reply("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    user_states[int(user_id)] = {
        'step': 'wait_name',
        'unsubscribed': unsubscribed
    }
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
    await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")


# –û–ø—Ä–æ—Å –§–ò–û, –∫—É—Ä—Å, –≥—Ä—É–ø–ø–∞
@dp.message_handler(lambda msg: msg.from_user.id in user_states)
async def collect_data(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state['step'] == 'wait_name':
        state['name'] = message.text
        state['step'] = 'wait_course'
        await message.reply("üìö –ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ?")
    elif state['step'] == 'wait_course':
        state['course'] = message.text
        state['step'] = 'wait_group'
        await message.reply("üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    elif state['step'] == 'wait_group':
        state['group'] = message.text

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            records = sheet.get_all_records()
            for row in records:
                if str(row.get("User ID")) == str(user_id):
                    await message.reply("–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
                    user_states.pop(user_id, None)
                    return
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
            print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:", e)

        # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            sheet.append_row([
                datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                str(user_id),
                state['name'],
                state['course'],
                state['group'],
                f"@{message.from_user.username or ''}",
                message.from_user.full_name or ''
            ])
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        links = []
        for chat_id in state.get('unsubscribed', []):
            try:
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    member_limit=1,
                    creates_join_request=False
                )
                links.append(invite.invite_link)
            except Exception as e:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
                print("–û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏:", e)

        if links:
            text = "\n".join([f"üîó {link}" for link in links])
            await message.reply(f"‚úÖ –°–ø–∞—Å–∏–±–æ!\n–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{text}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏.")

        user_states.pop(user_id)


@dp.message_handler(commands=['mute'])
async def mute_user(message: types.Message):
    if message.chat.type not in ['group', 'supergroup']:
        return

    chat_id = message.chat.id
    from_user = message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥–º–∏–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    member = await bot.get_chat_member(chat_id, from_user.id)
    if member.status not in ['administrator', 'creator']:
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    target_user = None
    duration_str = None
    reason = None

    # === –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
        parts = message.text.split(maxsplit=2)
        if len(parts) < 2:
            await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –º—É—Ç–∞. –ü—Ä–∏–º–µ—Ä: /mute 1h [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        duration_str = parts[1]
        reason = parts[2] if len(parts) > 2 else None

    # === –í–∞—Ä–∏–∞–Ω—Ç 2: /mute @username 1h [–ø—Ä–∏—á–∏–Ω–∞] ===
    else:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 3:
            await message.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –∏ —Å—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä: /mute @user 1h [–ø—Ä–∏—á–∏–Ω–∞]")
            return
        username = parts[1].lstrip("@")
        duration_str = parts[2]
        reason = parts[3] if len(parts) > 3 else None

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ username
            user_info = await bot.get_chat_member(chat_id, username)
            target_user = user_info.user
        except Exception as e:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.")
            print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username:", e)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    multiplier = {'m': 60, 'h': 3600, 'd': 86400}
    unit = duration_str[-1]
    if unit not in multiplier or not duration_str[:-1].isdigit():
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 1h, 30m, 2d")
        return

    seconds = int(duration_str[:-1]) * multiplier[unit]
    until_date = message.date + timedelta(seconds=seconds)

    try:
        await bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_user.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )

        name = f"@{target_user.username}" if target_user.username else f"id {target_user.id}"
        text = f"üîá {name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration_str}."
        if reason:
            text += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        await message.reply(text)

    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        print("–û—à–∏–±–∫–∞ mute:", e)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
