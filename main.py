import os
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# Telegram bot token
TOKEN = os.getenv("API_TOKEN")

# –î–≤–∞ ID –∫–∞–Ω–∞–ª–æ–≤
CHANNEL_1 = os.getenv("CHANNEL_ID")          # –ü—Ä–∏–º–µ—Ä: -1001234567890
CHANNEL_2 = os.getenv("CHANNEL_CHAT_ID")     # –ü—Ä–∏–º–µ—Ä: -1009876543210

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Google Sheets API setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("bot-creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1G5TYg6CJnEZygfiv6BeKnHuu-XirPQmlT4B2UFn19oc").sheet1

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —à–∞–≥–æ–≤
user_states = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ?
    try:
        records = sheet.get_all_records()
        for row in records:
            if str(row.get("User ID")) == user_id:
                await message.reply("üîÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—É—é.")
                return
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets:", e)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞
    unsubscribed = []
    for chat_id in [CHANNEL_1, CHANNEL_2]:
        try:
            member = await bot.get_chat_member(chat_id=chat_id, user_id=int(user_id))
            if member.status not in ['member', 'administrator', 'creator']:
                unsubscribed.append(chat_id)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª {chat_id}:", e)
            unsubscribed.append(chat_id)

    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —Å–æ–æ–±—â–∞–µ–º
    if not unsubscribed:
        await message.reply("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    user_states[int(user_id)] = {
        'step': 'wait_name',
        'unsubscribed': unsubscribed  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –≤—ã–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    }
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:")
    await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")

@dp.message_handler(lambda msg: msg.from_user.id in user_states)
async def collect_data(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state['step'] == 'wait_name':
        state['name'] = message.text
        state['step'] = 'wait_course'
        await message.reply("üìö –ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ?")
    elif state['step'] == 'wait_course':
        state['course'] = message.text
        state['step'] = 'wait_group'
        await message.reply("üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: \n–ü—Ä–∏–º–µ—Ä: 501-93–∞")
    elif state['step'] == 'wait_group':
        state['group'] = message.text

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            records = sheet.get_all_records()
            for row in records:
                if str(row.get("User ID")) == str(user_id):
                    await message.reply("–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω–Ω–µ–µ.")
                    user_states.pop(user_id, None)
                    return
        except Exception as e:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
            print("–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:", e)

        # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            sheet.append_row([
                datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                str(user_id),
                state['name'],
                state['course'],
                state['group']
            ])
        except Exception as e:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É.")
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
        links = []
        for chat_id in state.get('unsubscribed', []):
            try:
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    member_limit=1,
                    creates_join_request=False
                )
                links.append(invite.invite_link)
            except Exception as e:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–æ–∫.")
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:", e)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
        if links:
            text = "\n".join([f"üîó {link}" for link in links])
            await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{text}")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–æ–∫.")

        user_states.pop(user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
