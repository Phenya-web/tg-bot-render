import os
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import timedelta

# Telegram bot token –∏ ID –∫–∞–Ω–∞–ª–æ–≤
TOKEN = os.getenv("API_TOKEN")
CHANNEL_1 = os.getenv("CHANNEL_ID")
CHANNEL_2 = os.getenv("CHANNEL_CHAT_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("bot-creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1G5TYg6CJnEZygfiv6BeKnHuu-XirPQmlT4B2UFn19oc").sheet1

user_states = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —à–∞–≥–æ–≤


# –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
async def is_admin(chat_id, user_id):
    member = await bot.get_chat_member(chat_id, user_id)
    return member.status in ['administrator', 'creator']


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type != 'private':
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–°.")
    return
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ ‚Äî —É–∂–µ –µ—Å—Ç—å?
    try:
        records = sheet.get_all_records()
        for row in records:
            if str(row.get("User ID")) == user_id:
                await message.reply("üîÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–Ω–µ–µ –≤—ã–¥–∞–Ω–Ω—É—é.")
                return
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets:", e)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    unsubscribed = []
    for chat_id in [CHANNEL_1, CHANNEL_2]:
        try:
            member = await bot.get_chat_member(chat_id=chat_id, user_id=int(user_id))
            if member.status not in ['member', 'administrator', 'creator']:
                unsubscribed.append(chat_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {chat_id}:", e)
            unsubscribed.append(chat_id)

    if not unsubscribed:
        await message.reply("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
        return

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    user_states[int(user_id)] = {
        'step': 'wait_name',
        'unsubscribed': unsubscribed
    }
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.")
    await message.reply("üìù –í–≤–µ–¥–∏—Ç–µ –§–ò–û:")


# –û–ø—Ä–æ—Å –§–ò–û, –∫—É—Ä—Å, –≥—Ä—É–ø–ø–∞
@dp.message_handler(lambda msg: msg.from_user.id in user_states)
async def collect_data(message: types.Message):
    user_id = message.from_user.id
    state = user_states[user_id]

    if state['step'] == 'wait_name':
        state['name'] = message.text
        state['step'] = 'wait_course'
        await message.reply("üìö –ù–∞ –∫–∞–∫–æ–º –≤—ã –∫—É—Ä—Å–µ?")
    elif state['step'] == 'wait_course':
        state['course'] = message.text
        state['step'] = 'wait_group'
        await message.reply("üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    elif state['step'] == 'wait_group':
        state['group'] = message.text

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            records = sheet.get_all_records()
            for row in records:
                if str(row.get("User ID")) == str(user_id):
                    await message.reply("–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
                    user_states.pop(user_id, None)
                    return
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
            print("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:", e)

        # –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É
        try:
            sheet.append_row([
                datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                str(user_id),
                state['name'],
                state['course'],
                state['group'],
                f"@{message.from_user.username or ''}",
                message.from_user.full_name or ''
            ])
        except Exception as e:
            await message.reply("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.")
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", e)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        links = []
        for chat_id in state.get('unsubscribed', []):
            try:
                invite = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    member_limit=1,
                    creates_join_request=False
                )
                links.append(invite.invite_link)
            except Exception as e:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
                print("–û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏:", e)

        if links:
            text = "\n".join([f"üîó {link}" for link in links])
            await message.reply(f"‚úÖ –°–ø–∞—Å–∏–±–æ!\n–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n{text}")
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏.")

        user_states.pop(user_id)


# –ö–æ–º–∞–Ω–¥–∞ /mute
@dp.message_handler(commands=['mute'])
async def mute_user(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mute –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    if not await is_admin(message.chat.id, message.from_user.id):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    args = message.get_args()
    if not args:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: /mute 1h –∏–ª–∏ /mute 3d")

    duration_map = {'h': 'hours', 'd': 'days'}
    try:
        unit = args[-1]
        value = int(args[:-1])
        if unit not in duration_map:
            raise ValueError
        mute_duration = timedelta(**{duration_map[unit]: value})
    except:
        return await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /mute 1h")

    user_id = message.reply_to_message.from_user.id
    until_date = datetime.datetime.utcnow() + mute_duration

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à—ë–Ω –Ω–∞ {value} {duration_map[unit]}")
    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        print("Mute error:", e)


# –ö–æ–º–∞–Ω–¥–∞ /unmute
@dp.message_handler(commands=['unmute'])
async def unmute_user(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unmute –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    if not await is_admin(message.chat.id, message.from_user.id):
        return await message.reply("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    user_id = message.reply_to_message.from_user.id

    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        print("Unmute error:", e)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
